{"version":3,"sources":["../../server/auth/auth.js"],"names":["passport","require","localStrategy","Strategy","JWTstrategy","UserModel","use","usernameField","passwordField","passReqToCallback","req","email","password","done","name","body","create","user","findOne","message","isValidPassword","validate","secretOrKey","jwtFromRequest","token","cookies"],"mappings":"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","sourcesContent":["const passport = require(\"passport\");\nconst localStrategy = require(\"passport-local\").Strategy;\nconst JWTstrategy = require(\"passport-jwt\").Strategy;\n\nconst UserModel = require(\"../models/userModel\");\n\n// handle user registration\npassport.use(\n  \"signup\",\n  new localStrategy(\n    {\n      usernameField: \"email\",\n      passwordField: \"password\",\n      passReqToCallback: true,\n    },\n    async (req, email, password, done) => {\n      try {\n        const { name } = req.body;\n        const user = await UserModel.create({ email, password, name });\n        return done(null, user);\n      } catch (error) {\n        done(error);\n      }\n    }\n  )\n);\n\n// handle user login\npassport.use(\n  \"login\",\n  new localStrategy(\n    {\n      usernameField: \"email\",\n      passwordField: \"password\",\n    },\n    async (email, password, done) => {\n      try {\n        const user = await UserModel.findOne({ email });\n        if (!user) {\n          return done(null, false, { message: \"User not found\" });\n        }\n        const validate = await user.isValidPassword(password);\n        if (!validate) {\n          return done(null, false, { message: \"Wrong Password\" });\n        }\n        return done(null, user, { message: \"Logged in Successfully\" });\n      } catch (error) {\n        return done(error);\n      }\n    }\n  )\n);\n\n// verify token is valid\npassport.use(\n  new JWTstrategy(\n    {\n      secretOrKey: \"top_secret\",\n      jwtFromRequest: function (req) {\n        let token = null;\n        if (req && req.cookies) token = req.cookies[\"jwt\"];\n        return token;\n      },\n    },\n    async (token, done) => {\n      try {\n        return done(null, token.user);\n      } catch (error) {\n        done(error);\n      }\n    }\n  )\n);\n"],"file":"auth.js"}