{"version":3,"sources":["../../server/routes/password.js"],"names":["express","require","hbs","nodemailer","path","crypto","asyncMiddleware","UserModel","email","process","env","EMAIL","pass","PASSWORD","smtpTransport","createTransport","service","EMAIL_PROVIDER","auth","user","handlebarsOptions","viewEngine","viewPath","resolve","extName","use","router","Router","post","req","res","next","body","findOne","status","json","message","buffer","randomBytes","token","toString","findByIdAndUpdate","_id","resetToken","resetTokenExp","Date","now","data","to","from","template","subject","context","url","PORT","name","sendMail","$gt","password","verifiedPassword","undefined","save","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst hbs = require(\"nodemailer-express-handlebars\");\nconst nodemailer = require(\"nodemailer\");\nconst path = require(\"path\");\nconst crypto = require(\"crypto\");\n\nconst asyncMiddleware = require(\"../middleware/asyncMiddleware\");\nconst UserModel = require(\"../models/userModel\");\n\nconst email = process.env.EMAIL;\nconst pass = process.env.PASSWORD;\n\nconst smtpTransport = nodemailer.createTransport({\n  service: process.env.EMAIL_PROVIDER,\n  auth: {\n    user: email,\n    pass: pass,\n  },\n});\n\nconst handlebarsOptions = {\n  viewEngine: \"handlebars\",\n  viewPath: path.resolve(\"./templates/\"),\n  extName: \".html\",\n};\n\nsmtpTransport.use(\"compile\", hbs(handlebarsOptions));\n\nconst router = express.Router();\n\nrouter.post(\n  \"/forgot-password\",\n  asyncMiddleware(async (req, res, next) => {\n    const { email } = req.body;\n    const user = await UserModel.findOne({ email });\n    if (!user) {\n      res.status(400).json({ message: \"invalid email\" });\n      return;\n    }\n\n    // create user token\n    const buffer = crypto.randomBytes(20);\n    const token = buffer.toString(\"hex\");\n\n    // update user reset password token and exp\n    await UserModel.findByIdAndUpdate(\n      { _id: user._id },\n      { resetToken: token, resetTokenExp: Date.now() + 600000 }\n    );\n\n    // send user password reset email\n    const data = {\n      to: user.email,\n      from: email,\n      template: \"forgot-password\",\n      subject: \"Phaser Leaderboard Password Reset\",\n      context: {\n        url: `http://localhost:${\n          process.env.PORT || 3000\n        }/reset-password.html?token=${token}`,\n        name: user.name,\n      },\n    };\n    await smtpTransport.sendMail(data);\n\n    res\n      .status(200)\n      .json({\n        message:\n          \"An email has been sent to your email. Password reset link is only valid for 10 minutes.\",\n      });\n  })\n);\n\nrouter.post(\n  \"/reset-password\",\n  asyncMiddleware(async (req, res, next) => {\n    const user = await UserModel.findOne({\n      resetToken: req.body.token,\n      resetTokenExp: { $gt: Date.now() },\n    });\n    if (!user) {\n      res.status(400).json({ message: \"invalid token\" });\n      return;\n    }\n\n    // ensure provided password matches verified password\n    if (req.body.password !== req.body.verifiedPassword) {\n      res.status(400).json({ message: \"passwords do not match\" });\n      return;\n    }\n\n    // update user model\n    user.password = req.body.password;\n    user.resetToken = undefined;\n    user.resetTokenExp = undefined;\n    await user.save();\n\n    // send user password update email\n    const data = {\n      to: user.email,\n      from: email,\n      template: \"reset-password\",\n      subject: \"Phaser Leaderboard Password Reset Confirmation\",\n      context: {\n        name: user.name,\n      },\n    };\n    await smtpTransport.sendMail(data);\n\n    res.status(200).json({ message: \"password updated\" });\n  })\n);\n\nmodule.exports = router;\n"],"file":"password.js"}