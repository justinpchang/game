{"version":3,"sources":["../../server/routes/main.js"],"names":["passport","require","express","jwt","tokenList","router","Router","get","req","res","next","status","json","post","authenticate","session","message","err","user","info","error","Error","login","body","_id","email","name","token","sign","expiresIn","refreshToken","cookie","cookies","clearCookie"],"mappings":"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","sourcesContent":["const passport = require(\"passport\");\nconst express = require(\"express\");\nconst jwt = require(\"jsonwebtoken\");\n\nconst tokenList = {};\nconst router = express.Router();\n\nrouter.get(\"/status\", (req, res, next) => {\n  res.status(200).json({ status: \"ok\" });\n});\n\nrouter.post(\n  \"/signup\",\n  passport.authenticate(\"signup\", { session: false }),\n  async (req, res, next) => {\n    res.status(200).json({ message: \"signup successful\" });\n  }\n);\n\nrouter.post(\"/login\", async (req, res, next) => {\n  passport.authenticate(\"login\", async (err, user, info) => {\n    try {\n      if (err || !user) {\n        const error = new Error(\"An Error occured\");\n        return next(error);\n      }\n      req.login(user, { session: false }, async (error) => {\n        if (error) return next(error);\n        const body = {\n          _id: user._id,\n          email: user.email,\n          name: user.name,\n        };\n\n        const token = jwt.sign({ user: body }, \"top_secret\", {\n          expiresIn: 300,\n        });\n        const refreshToken = jwt.sign({ user: body }, \"top_secret_refresh\", {\n          expiresIn: 86400,\n        });\n\n        // store tokens in cookie\n        res.cookie(\"jwt\", token);\n        res.cookie(\"refreshJwt\", refreshToken);\n\n        // store tokens in memory\n        tokenList[refreshToken] = {\n          token,\n          refreshToken,\n          email: user.email,\n          _id: user._id,\n          name: user.name,\n        };\n\n        //Send back the token to the user\n        return res.status(200).json({ token, refreshToken });\n      });\n    } catch (error) {\n      return next(error);\n    }\n  })(req, res, next);\n});\n\nrouter.post(\"/token\", (req, res) => {\n  const { refreshToken } = req.body;\n  if (refreshToken in tokenList) {\n    const body = {\n      email: tokenList[refreshToken].email,\n      _id: tokenList[refreshToken]._id,\n      name: tokenList[refreshToken].name,\n    };\n    const token = jwt.sign({ user: body }, \"top_secret\", { expiresIn: 300 });\n\n    // update jwt\n    res.cookie(\"jwt\", token);\n    tokenList[refreshToken].token = token;\n\n    res.status(200).json({ token });\n  } else {\n    res.status(401).json({ message: \"Unauthorized\" });\n  }\n});\n\nrouter.post(\"/logout\", (req, res) => {\n  if (req.cookies) {\n    const refreshToken = req.cookies[\"refreshJwt\"];\n    if (refreshToken in tokenList) delete tokenList[refreshToken];\n    res.clearCookie(\"refreshJwt\");\n    res.clearCookie(\"jwt\");\n  }\n\n  res.status(200).json({ message: \"logged out\" });\n});\n\nexport default router;"],"file":"main.js"}