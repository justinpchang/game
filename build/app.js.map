{"version":3,"sources":["../server/app.js"],"names":["require","config","uri","process","env","MONGO_CONNECTION_URL","mongoose","connect","useNewUrlParser","useCreateIndex","connection","on","error","console","log","exit","set","app","server","Server","io","listen","players","socket","id","flipX","x","Math","floor","random","y","playerId","emit","broadcast","movementData","use","bodyParser","urlencoded","extended","json","get","passport","authenticate","session","req","res","sendFile","__dirname","express","routes","passwordRoutes","secureRoutes","post","next","message","body","user","email","name","ChatModel","create","username","status","err","PORT"],"mappings":"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","sourcesContent":["require('dotenv').config();\n\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport mongoose from 'mongoose';\nimport cookieParser from 'cookie-parser';\nimport passport from 'passport';\n\nimport routes from './routes/main';\nimport secureRoutes from './routes/secure';\nimport passwordRoutes from './routes/password';\nimport asyncMiddleware from './middleware/asyncMiddleware';\nimport ChatModel from './models/chatModel';\n\n// setup mongo connection\nconst uri = process.env.MONGO_CONNECTION_URL;\nmongoose.connect(uri, { useNewUrlParser: true, useCreateIndex: true });\nmongoose.connection.on('error', (error) => {\n  console.log(error);\n  process.exit(1);\n});\nmongoose.connection.on('connected', function () {\n  console.log('connected to mongo');\n});\nmongoose.set('useFindAndModify', false);\n\n// create an instance of an express app\nconst app = express();\nconst server = require('http').Server(app);\nconst io = require('socket.io').listen(server);\n\nconst players = {};\n\nio.on('connection', function (socket) {\n  console.log('a user connected: ', socket.id);\n  // create a new player and add it to our players object\n  players[socket.id] = {\n    flipX: false,\n    x: Math.floor(Math.random() * 400) + 50,\n    y: Math.floor(Math.random() * 500) + 50,\n    playerId: socket.id,\n  };\n  // send the players object to the new player\n  socket.emit('currentPlayers', players);\n  // update all other players of the new player\n  socket.broadcast.emit('newPlayer', players[socket.id]);\n\n  // when a player disconnects, remove them from our players object\n  socket.on('disconnect', function () {\n    console.log('user disconnected: ', socket.id);\n    delete players[socket.id];\n    // emit a message to all players to remove this player\n    io.emit('disconnect', socket.id);\n  });\n\n  // when a plaayer moves, update the player data\n  socket.on('playerMovement', function (movementData) {\n    players[socket.id].x = movementData.x;\n    players[socket.id].y = movementData.y;\n    players[socket.id].flipX = movementData.flipX;\n    // emit a message to all players about the player that moved\n    socket.broadcast.emit('playerMoved', players[socket.id]);\n  });\n});\n\n// update express settings\napp.use(bodyParser.urlencoded({ extended: false })); // parse application/x-www-form-urlencoded\napp.use(bodyParser.json()); // parse application/json\napp.use(cookieParser());\n\n// require passport auth\nrequire('./auth/auth');\n\napp.get(\n  '/game.html',\n  passport.authenticate('jwt', { session: false }),\n  function (req, res) {\n    res.sendFile(__dirname + '/public/game.html');\n  }\n);\n\napp.get('/game.html', function (req, res) {\n  res.sendFile(__dirname + '/public/game.html');\n});\n\napp.use(express.static(__dirname + '/public'));\n\napp.get('/', function (req, res) {\n  res.sendFile(__dirname + '/index.html');\n});\n\n// main routes\napp.use('/', routes);\napp.use('/', passwordRoutes);\napp.use('/', passport.authenticate('jwt', { session: false }), secureRoutes);\n\napp.post(\n  '/submit-chatline',\n  passport.authenticate('jwt', { session: false }),\n  asyncMiddleware(async (req, res, next) => {\n    const { message } = req.body;\n    const { email, name } = req.user;\n    await ChatModel.create({ email, message });\n    io.emit('new message', {\n      username: name,\n      message,\n    });\n    res.status(200).json({ status: 'ok' });\n  })\n);\n\n// catch all other routes\napp.use((req, res, next) => {\n  res.status(404).json({ message: '404 - Not Found' });\n});\n\n// handle errors\napp.use((err, req, res, next) => {\n  console.log(err.message);\n  res.status(err.status || 500).json({ error: err.message });\n});\n\nserver.listen(process.env.PORT || 3000, () => {\n  console.log(`Server started on port ${process.env.PORT || 3000}`);\n});\n"],"file":"app.js"}