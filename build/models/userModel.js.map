{"version":3,"sources":["../../server/models/userModel.js"],"names":["mongoose","require","bcrypt","Schema","UserSchema","email","type","String","required","unique","password","name","highScore","Number","resetToken","resetTokenExp","Date","pre","next","user","hash","methods","isValidPassword","compare","UserModel","model","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAME,MAAM,GAAGH,QAAQ,CAACG,MAAxB;AAEA,IAAMC,UAAU,GAAG,IAAID,MAAJ,CAAW;AAC5BE,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE;AAHH,GADqB;AAM5BC,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GANkB;AAU5BG,EAAAA,IAAI,EAAE;AACJL,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GAVsB;AAc5BI,EAAAA,SAAS,EAAE;AACTN,IAAAA,IAAI,EAAEO,MADG;AAET,eAAS;AAFA,GAdiB;AAkB5BC,EAAAA,UAAU,EAAE;AACVR,IAAAA,IAAI,EAAEC;AADI,GAlBgB;AAqB5BQ,EAAAA,aAAa,EAAE;AACbT,IAAAA,IAAI,EAAEU;AADO;AArBa,CAAX,CAAnB;AA0BAZ,UAAU,CAACa,GAAX,CAAe,MAAf;AAAA,2FAAuB,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,IADe,GACR,IADQ;AAAA;AAAA,mBAEFjB,MAAM,CAACkB,IAAP,CAAY,KAAKV,QAAjB,EAA2B,EAA3B,CAFE;;AAAA;AAEfU,YAAAA,IAFe;AAGrB,iBAAKV,QAAL,GAAgBU,IAAhB;AACAF,YAAAA,IAAI;;AAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAOAd,UAAU,CAACiB,OAAX,CAAmBC,eAAnB;AAAA,4FAAqC,kBAAgBZ,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BS,YAAAA,IAD6B,GACtB,IADsB;AAAA;AAAA,mBAEbjB,MAAM,CAACqB,OAAP,CAAeb,QAAf,EAAyBS,IAAI,CAACT,QAA9B,CAFa;;AAAA;AAE7Ba,YAAAA,OAF6B;AAAA,8CAG5BA,OAH4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAMA,IAAMC,SAAS,GAAGxB,QAAQ,CAACyB,KAAT,CAAe,MAAf,EAAuBrB,UAAvB,CAAlB;AAEAsB,MAAM,CAACC,OAAP,GAAiBH,SAAjB","sourcesContent":["const mongoose = require(\"mongoose\");\nconst bcrypt = require(\"bcrypt\");\n\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  name: {\n    type: String,\n    required: true,\n  },\n  highScore: {\n    type: Number,\n    default: 0,\n  },\n  resetToken: {\n    type: String,\n  },\n  resetTokenExp: {\n    type: Date,\n  },\n});\n\nUserSchema.pre(\"save\", async function (next) {\n  const user = this;\n  const hash = await bcrypt.hash(this.password, 10);\n  this.password = hash;\n  next();\n});\n\nUserSchema.methods.isValidPassword = async function (password) {\n  const user = this;\n  const compare = await bcrypt.compare(password, user.password);\n  return compare;\n};\n\nconst UserModel = mongoose.model(\"user\", UserSchema);\n\nmodule.exports = UserModel;\n"],"file":"userModel.js"}